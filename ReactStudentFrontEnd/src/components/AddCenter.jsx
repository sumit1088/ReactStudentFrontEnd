import React, { useState, useEffect } from "react";
import DashboardLayout from "./DashboardLayout"; // Import the layout component
import { fetchDistricts, fetchTehsils } from '../services/api'; // API call functions
import ReactSelect from 'react-select';

const AddCenter = () => {
  const [form, setForm] = useState({
    name: '',
    center: '',
    centerCode: '',
    district: '',
    taluka: '',
  });

  const [districts, setDistricts] = useState([]);
  const [tehsils, setTehsils] = useState([]);
  const [filteredTehsils, setFilteredTehsils] = useState([]);

  useEffect(() => {
    const loadData = async () => {
      try {
        const [districtData, tehsilData] = await Promise.all([fetchDistricts(), fetchTehsils()]);
        setDistricts(districtData);
        setTehsils(tehsilData);
      } catch (error) {
        console.error('Error fetching data:', error);
      }
    };
    loadData();
  }, []);

  // Filter tehsils when district changes
  useEffect(() => {
    const matchedTehsils = tehsils.filter(tehsil => tehsil.districtId === Number(form.district));
    setFilteredTehsils(matchedTehsils);
    setForm(prev => ({ ...prev, taluka: '' })); // Reset taluka when district changes
  }, [form.district, tehsils]);

  const handleChange = (name, value) => {
    setForm(prev => ({
      ...prev,
      [name]: value,
    }));
  };

  const handleSubmit = async (e) => {
    e.preventDefault();

    // Prepare the data to send to the API
    const newCenter = {
      id: 0, // Assuming the ID is generated by the backend
      centerId: form.centerCode, // Assuming 'centerCode' is the unique identifier
      name: form.name,
      address: form.center, // Assuming the 'center' field is the address
      districtId: Number(form.district),
      tehsilId: Number(form.taluka),
      isDeleted: false, // Default to false
      created: new Date().toISOString(), // Set the current date as created
    };

    // Send the POST request to add the new center
    try {
      const res = await fetch('http://192.168.1.28:8075/api/Centers', {
        method: 'POST',
        headers: {
          'Accept': 'application/json',
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(newCenter),
      });

      if (res.ok) {
        const responseData = await res.json();
        alert('Center added successfully!');
        // Optionally reset the form or show a success message
        setForm({
          name: '',
          center: '',
          centerCode: '',
          district: '',
          taluka: '',
        });
      } else {
        alert('Failed to add center.');
      }
    } catch (error) {
      console.error('Error adding center:', error);
      alert('Error occurred while adding center.');
    }
  };

  const DistrictSelect = ({ districts, value, onChange }) => {
    const districtOptions = districts.map(district => ({
      value: district.id,
      label: district.name,
    }));

    return (
      <div>
        <label className="block font-medium text-gray-700 mb-1">District</label>
        <ReactSelect
          options={districtOptions}
          value={districtOptions.find(option => option.value === value) || null}
          onChange={(selectedOption) => onChange("district", selectedOption?.value)}
          className="w-full"
          placeholder="Select District"
        />
      </div>
    );
  };

  const TalukaSelect = ({ filteredTehsils, value, onChange }) => {
    const talukaOptions = filteredTehsils.map(tehsil => ({
      value: tehsil.id,
      label: tehsil.name,
    }));

    return (
      <div className="mb-4">
        <label className="block font-medium text-gray-700 mb-1">Taluka</label>
        <ReactSelect
          options={talukaOptions}
          value={talukaOptions.find(option => option.value === value) || null}
          onChange={(selectedOption) => onChange("taluka", selectedOption?.value)}
          className="w-full"
          placeholder="Select Taluka"
        />
      </div>
    );
  };

  return (
    <DashboardLayout>
      <div className="flex justify-center items-center min-h-screen bg-gray-50 px-4">
        <div className="w-full max-w-md sm:max-w-lg lg:max-w-2xl bg-white p-6 rounded-lg shadow space-y-4">
          <h2 className="text-2xl font-bold mb-6 text-center">Add Center</h2>

          <form onSubmit={handleSubmit}>
            <div>
              <label className="block font-medium text-gray-700 mb-1">Name</label>
              <input
                name="name"
                type="text"
                required
                value={form.name}
                onChange={(e) => handleChange(e.target.name, e.target.value)}
                className="w-full border rounded px-3 py-2"
              />
            </div>

            <div>
              <label className="block font-medium text-gray-700 mb-1">Center</label>
              <input
                name="center"
                type="text"
                required
                value={form.center}
                onChange={(e) => handleChange(e.target.name, e.target.value)}
                className="w-full border rounded px-3 py-2"
              />
            </div>

            <div>
              <label className="block font-medium text-gray-700 mb-1">Center Code</label>
              <input
                name="centerCode"
                type="text"
                required
                value={form.centerCode}
                onChange={(e) => handleChange(e.target.name, e.target.value)}
                className="w-full border rounded px-3 py-2"
              />
            </div>

            {/* District Dropdown */}
            <DistrictSelect
              districts={districts}
              value={form.district}
              onChange={handleChange}
            />

            {/* Taluka Dropdown */}
            <TalukaSelect
              filteredTehsils={filteredTehsils}
              value={form.taluka}
              onChange={handleChange}
            />

            {/* Submit Button */}
            <div className="flex justify-center mt-5">
              <button
                type="submit"
                className="w-32 bg-blue-600 text-white py-1.5 text-sm rounded hover:bg-blue-700"
              >
                Add Center
              </button>
            </div>
          </form>
        </div>
      </div>
    </DashboardLayout>
  );
};

export default AddCenter;
